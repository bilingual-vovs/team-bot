const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const token = fs.readFileSync(path.join(__dirname, 'apikey.txt'), 'utf8').trim();
const bot = new TelegramBot(token, {polling: true});

const chatStatesPath = path.join(__dirname, 'chatStates.json');
const teamCode = 'RaceTeam'

function getChatState(chatId) {
    return new Promise((resolve, reject) => {
        fs.readFile(chatStatesPath, 'utf8', (err, data) => {
            if (err) return reject(err);
            let states;
            try {
                states = JSON.parse(data);
            } catch (e) {
                return reject(e);
            }
            if (states && states[chatId]) {
                resolve(states[chatId]);
            } else {
                reject(new Error('No state for this chat id'));
            }
        });
    });
}
function setChatState(chatId, state) {
    return new Promise((resolve, reject) => {
        fs.readFile(chatStatesPath, 'utf8', (err, data) => {
            let states = {};
            if (!err && data) {
                try {
                    states = JSON.parse(data);
                } catch (e) {
                    return reject(e);
                }
            }
            states[chatId] = state;
            fs.writeFile(chatStatesPath, JSON.stringify(states, null, 2), (err) => {
                if (err) return reject(err);
                resolve();
            });
        });
    });
}
const usersPath = path.join(__dirname, 'users.json');

function createUser(user) {
    return new Promise((resolve, reject) => {
        fs.readFile(usersPath, 'utf8', (err, data) => {
            let users = [];
            if (!err && data) {
                try {
                    users = JSON.parse(data);
                } catch (e) {
                    users = [];
                }
            }
            // Check if user already exists
            const exists = users.some(u => u.chatId === user.chatId);
            if (!exists) {
                users.push(user);
                fs.writeFile(usersPath, JSON.stringify(users, null, 2), (err) => {
                    if (err) return reject(err);
                    resolve();
                });
            } else {
                resolve();
            }
        });
    });
}

function readUsers() {
    return new Promise((resolve, reject) => {
        fs.readFile(usersPath, 'utf8', (err, data) => {
            if (err) return resolve([]); // Return empty array if file doesn't exist
            try {
                const users = JSON.parse(data);
                resolve(users);
            } catch (e) {
                resolve([]);
            }
        });
    });
}
const handleMsg = (msg, state) => {
    switch (state) {
        case "started":
            if (msg.text && msg.text.toString().toLowerCase() === teamCode.toLowerCase()) {
                bot.sendMessage(msg.chat.id, "–¢–µ–ø–µ—Ä –ø—Ä–µ–¥—Å—Ç–∞–≤—Å—è, –±—É–¥—å –ª–∞—Å–∫–∞. –í–≤–µ–¥–∏ –°–í–û–Ñ –Ü–º'—è —Ç–∞ –ü—Ä–∏–∑–≤–∏—â–µ");
                // Update state to 'pending'
                setChatState(msg.chat.id, "pending").catch(() => {});
            } else {
                bot.sendMessage(msg.chat.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –∫–æ–º–∞–Ω–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            }
            break;
        case "pending":
            // Save user name and chat id to users.json using createUser
            const user = {
                chatId: msg.chat.id,
                name: msg.text
            };
            createUser(user)
                .then(() => {
                    bot.sendMessage(
                        msg.chat.id,
                        "<b>–ü–∞–º'—è—Ç–∫–∞ –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é –±–æ—Ç–∞:</b>\n\n" +
                        "‚Ä¢ <b>/createticket</b> ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É –º–µ—Ö–∞–Ω—ñ–∫–∞.\n" +
                        "‚Ä¢ <b>/viewtickets</b> ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó –∑–∞—è–≤–∫–∏.\n" +
                        "‚Ä¢ <b>/help</b> ‚Äî –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.\n" +
                        "‚Ä¢ <b>/info</b> ‚Äî –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –±–æ—Ç–∞.\n\n" +
                        "–ü–∏—à—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∫–æ–º–∞–Ω–¥–∏ —É —Ü–µ–π —á–∞—Ç. –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É –¥–µ—Ç–∞–ª—å–Ω–æ, —â–æ–± –º–µ—Ö–∞–Ω—ñ–∫ –º—ñ–≥ —à–≤–∏–¥–∫–æ –¥–æ–ø–æ–º–æ–≥—Ç–∏.\n\n" +
                        "–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—â—ñ ‚Äî –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—ñ–≤.",
                        { parse_mode: "HTML" }
                    );
                })
                .catch(() => {
                    bot.sendMessage(msg.chat.id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
                });

            setChatState(msg.chat.id, "authorized").catch(() => {});
            break;
        case "authorized":
            if (msg.text && msg.text.toString().toLowerCase() === "/createticket") {
                setChatState(msg.chat.id, "ticket_creation").catch(() => {});
                bot.sendMessage(
                    msg.chat.id,
                    "–Ø–∫–∞ –ø—Ä–æ–±–ª–µ–º–∞ –≤–∞—Å —Å–ø—ñ—Ç–∫–∞–ª–∞? - –û–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º:\n\n1. –ó —á–∏–º –ø–æ–≤'—è–∑–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ (–ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è, –≥–∞–ª—å–º–∞, –∫–æ–ª–µ—Å–∞, —ñ–Ω—à–µ)\n2. –ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º–∏\n3. –û–ø–∏—à–∏ —Å–≤—ñ–π –≤–µ–ª–æ—Å–∏–ø–µ–¥, —â–æ–± –º–µ—Ö–∞–Ω—ñ–∫—É –±—É–ª–æ –ª–µ–≥—à–µ –π–æ–≥–æ –∑–Ω–∞–π—Ç–∏."
                );
            } else if (msg.text && msg.text.toString().toLowerCase() === "/viewtickets") {
                const ticketsPath = path.join(__dirname, 'tickets.json');
                fs.readFile(ticketsPath, 'utf8', (err, data) => {
                    if (err) {
                        bot.sendMessage(msg.chat.id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—à—ñ –∑–∞—è–≤–∫–∏ –∞–±–æ —ó—Ö —â–µ –Ω–µ–º–∞—î.");
                        return;
                    }
                    let tickets = [];
                    try {
                        tickets = JSON.parse(data);
                    } catch (e) {
                        tickets = [];
                    }
                    const userTickets = tickets.filter(t => t.chatId === msg.chat.id);
                    if (userTickets.length === 0) {
                        bot.sendMessage(msg.chat.id, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞—è–≤–æ–∫.");
                    } else {
                        let message = "<b>–í–∞—à—ñ –∑–∞—è–≤–∫–∏:</b>\n\n";
                        userTickets.forEach((t, i) => {
                            message += `${i + 1}. ${t.text}\nüïí ${new Date(t.createdAt).toLocaleString()}\n\n`;
                        });
                        bot.sendMessage(msg.chat.id, message, { parse_mode: "HTML" });
                    }
                });
            } else {
                bot.sendMessage(
                    msg.chat.id,
                    "<b>–ü–∞–º'—è—Ç–∫–∞ –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é –±–æ—Ç–∞:</b>\n\n" +
                    "‚Ä¢ <b>/createticket</b> ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É –º–µ—Ö–∞–Ω—ñ–∫–∞.\n" +
                    "‚Ä¢ <b>/viewtickets</b> ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó –∑–∞—è–≤–∫–∏.\n" +
                    "‚Ä¢ <b>/help</b> ‚Äî –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.\n" +
                    "‚Ä¢ <b>/info</b> ‚Äî –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –±–æ—Ç–∞.\n\n" +
                    "–ü–∏—à—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∫–æ–º–∞–Ω–¥–∏ —É —Ü–µ–π —á–∞—Ç. –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É –¥–µ—Ç–∞–ª—å–Ω–æ, —â–æ–± –º–µ—Ö–∞–Ω—ñ–∫ –º—ñ–≥ —à–≤–∏–¥–∫–æ –¥–æ–ø–æ–º–æ–≥—Ç–∏.\n\n" +
                    "–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—â—ñ ‚Äî –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—ñ–≤.",
                    { parse_mode: "HTML" }
                );
            }
            break;
        case "ticket_creation":
            // Save the ticket to tickets.json
            const ticketsPath = path.join(__dirname, 'tickets.json');
            const ticket = {
            chatId: msg.chat.id,
            text: msg.text,
            createdAt: new Date().toISOString()
            };
            fs.readFile(ticketsPath, 'utf8', (err, data) => {
            let tickets = [];
            if (!err && data) {
                try {
                tickets = JSON.parse(data);
                } catch (e) {
                tickets = [];
                }
            }
            tickets.push(ticket);
            fs.writeFile(ticketsPath, JSON.stringify(tickets, null, 2), (err) => {
                // Ignore write errors for now
            });
            });
            bot.sendMessage(msg.chat.id, "–î—è–∫—É—î–º–æ! –í–∞—à—É –∑–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ. –ú–µ—Ö–∞–Ω—ñ–∫ –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.");
            setChatState(msg.chat.id, "authorized").catch(() => {});
            break;
            default:
            bot.sendMessage(msg.chat.id, "–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è. –°–ø—Ä–æ–±—É–π—Ç–µ /start.");
            break;
    }
}

bot.on('message', (msg) => {
    getChatState(msg.chat.id)
        .then(state => handleMsg(msg, state))
        .catch(err => {
            const hi = "/start";
            if (msg.text && msg.text.toString().toLowerCase().startsWith(hi)) {
                bot.sendMessage(msg.chat.id, "–ü—Ä–∏–≤—ñ—Ç, –≤—ñ–¥–ø—Ä–∞–≤ –∫–æ–¥ —Å–≤–æ—î—ó –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ç–æ–≥–æ —â–æ –± –ø–æ—á–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º" );
                setChatState(msg.chat.id, "started").catch(() => {
                    bot.sendMessage(msg.chat.id, "Error saving state.");
                });
            }
        });
});
